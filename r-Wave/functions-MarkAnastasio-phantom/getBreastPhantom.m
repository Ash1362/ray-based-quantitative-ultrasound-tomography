function phan = getBreastPhantom(phantom_id, phantom_parameter, setting, plot_phantom)
%GETBREASTPHANTOM Load and integrate breast phantom into PAMMOTH setting
%
% DESCRIPTION:
%       getBreastPhantom returns a breast segmentation aligned with the
%       PAMMOTH scanner by creating a generic breast phantom or loading a 
%       segementation, fitting it into bowl, and interpolating it into the 
%       spatial resolution
%
% USAGE:
%       phan = getBreastPhantom(phantom_id, phantom_path, setting)
%       phan = getBreastPhantom(phantom_id, phantom_path, setting, plot_phantom)
%
% INPUTS:
%       phantom_id   - string to identify one of the different MRI phantoms
%                      or a generic phantom: 'Neg_07_Left', 'Neg_35_Left',
%                      'Neg_47_Left' for the MRI phantoms and 'generic' for
%                      a generic, homogenous one.
%       phantom_parameter - for MRI phanotms, a file path to directory
%                           containting the OA-BREAST data set, for
%                           generic, the z-height of the breast
%       setting      - a struct generated by makePAMMOTHGeometry.m
%
% OPTIONAL INPUTS:
%       plot_phantom - boolean controlling whether the phantom is
%                      plotted (default = false)
%
% OUTPUTS:
%       phan - uint8 volume containing segementation
%               0: background
%               1: fibro-glandular tissue
%               2: fat
%               3: skin layer
%               4: blood vessel
%               5: generic breast tissue
%
% ABOUT:
%       author          - Felix Lucka
%       date            - 19.02.2017
%       last update     - 06.04.2017
%
% See also makePAMMOTHGeometry makeIllumination

% check user defined value for plot_setting, otherwise assign default value
if nargin < 4 || isempty(plot_phantom)
    plot_phantom = false;
end

% define sizes of phantom
switch phantom_id
    case 'generic'
        
        % generic phantom based on mollifier function
        [x, y, z]      = ndgrid(setting.x_vec, setting.y_vec, setting.z_vec);

        % first check if it fits into the bowl
        min_z = min(z(setting.mask == 1));
        if(phantom_parameter >= abs(min_z))
            error(['The z-height of the breast phantom is too large to fit '...
                'into the senor geometry']);
        end
        
        % main construction
        xy_norm_radius = sqrt(x.^2 + y.^2) ./ setting.radius;
        phan = (setting.dx + phantom_parameter) ...
                                * exp(-1 ./ (1 - xy_norm_radius.^2) + 1);
        phan = phan .* double(xy_norm_radius <= 1);
        phan(isnan(phan)) = 0;
        phan = phan > -z + setting.dx;
        phan(setting.mask == 3 | setting.mask == 2) = false;

        % second check if it fits into the bowl
        if(any(phan(:) & (setting.mask(:) ~= 1)))
           error('The chosen breast size does not fit into the bowl') 
        end
        
        % generic breast tissue gets label 5 for now
        phan           = double(phan);
        phan(phan > 0) = 5;
        
        % add 2.25mm thick skin layer
        skin_vox = round(2.25e-3 / setting.dx);
        for i=1:skin_vox
           surf = cumsum(phan == 5, 3);
           surf = surf == 1;
           phan(surf) = 3;
        end
        phan(setting.mask == 3 | setting.mask == 2) = false;

        % convertion to uint8
        phan = uint8(phan);
       
    otherwise 
        
        % MRI phantoms
        switch phantom_id
            case 'Neg_07_Left'
                Nx_bp = 616; Ny_bp = 485; Nz_bp = 719;
                dx_bp = 0.2 * 10^-3; % [m]
            case 'Neg_35_Left'
                Nx_bp = 284; Ny_bp = 411; Nz_bp = 722;
                dx_bp = 0.2 * 10^-3; % [m]
            case 'Neg_47_Left'
                Nx_bp = 495; Ny_bp = 615; Nz_bp = 752;
                dx_bp = 0.2 * 10^-3; % [m]
            otherwise
                error(['Choose one of the supported phantoms: ''generic'', ' ...
                    '''Neg_07_Left'', ''Neg_35_Left'' or ''Neg_47_Left''']);
        end
        
        % load phantom
        fid  = fopen([phantom_parameter phantom_id '/MergedPhantom.DAT'], 'r');
        phan = fread(fid, 'uint8');
        phan = uint8(reshape(phan, [Nx_bp, Ny_bp, Nz_bp]));
        fclose(fid);
        
        % in the provided phantoms, the tissues start with 2 (bug)
        phan = phan - 1;
        phan(phan < 0) = 0;
        
        % flip x and z dimensions
        phan = permute(phan, [3, 2, 1]);
        
        % add 0 layer
        %phan = padarray(phan, mod(size(phan)+1, 2), 'pre');
        phan_ = zeros(intManipulation(size(phan), 'oddUp'));
        phan_((mod(size(phan,1)+1, 2)+1):end, (mod(size(phan,2)+1, 2)+1):end, ...
            (mod(size(phan,3)+1, 2)+1):end) = phan; 
        
        phan = phan_; clear phan_
        
        
        % set up interpolation into spatial grid
        Nxyz_bp  = size(phan);
        x_vec_bp = dx_bp * (-((Nxyz_bp(1)-1)/2):1:((Nxyz_bp(1)-1)/2));
        y_vec_bp = dx_bp * (-((Nxyz_bp(2)-1)/2):1:((Nxyz_bp(2)-1)/2));
        z_vec_bp = dx_bp * (-(Nxyz_bp(3)-1):0);
        [X_bp,Y_bp,Z_bp] = ndgrid(x_vec_bp, y_vec_bp, z_vec_bp);
        [X,Y,Z]          = ndgrid(setting.x_vec, setting.y_vec, setting.z_vec);
        
        % interpolate into spatial grid
        phan =  interpn(X_bp, Y_bp, Z_bp, phan, X, Y, Z, 'nearest');
        phan(isnan(phan)) = 0; % correct 'NaN' values from interpolation
        
end



% plot results
if plot_phantom
    phan2plot = phan + 1;
    max_label = max(phan2plot(:));
    phan2plot(setting.mask == 0 | setting.mask == 3 ) = 0;
    
    fig_h = figure('PaperType','A0');
    colormap(jet);
    
    % x slice
    subplot1 = subplot(1, 3, 1, 'Parent', fig_h);
    hold(subplot1, 'on');
    imagesc(100 * setting.z_vec, 100 * setting.y_vec, ...
        squeeze(phan2plot(setting.Nx/2, :, :)), [0, max_label]);
    box(subplot1, 'on');
    axis(subplot1, 'xy');
    set(subplot1, 'DataAspectRatio', [1 1 1], 'Layer', 'top');
    xlabel('z [cm]');
    ylabel('y [cm]');
    xlim(subplot1, 100 * setting.z_vec([1,end]))
    ylim(subplot1, 100 * setting.y_vec([1,end]))
    title(['x slice ' int2str(setting.Nx/2)]);
    
    
    % y slice
    subplot2 = subplot(1, 3, 2, 'Parent', fig_h);
    hold(subplot2, 'on');
    imagesc(100 * setting.z_vec, 100 * setting.x_vec, ...
        squeeze(phan2plot(:, setting.Ny/2, :)), [0, max_label]);
    box(subplot2, 'on');
    axis(subplot2, 'xy');
    set(subplot2, 'DataAspectRatio', [1 1 1], 'Layer', 'top');
    xlabel('z [cm]');
    ylabel('x [cm]');
    xlim(subplot2, 100 * setting.z_vec([1,end]))
    ylim(subplot2, 100 * setting.x_vec([1,end]))
    title(['y slice ' int2str(setting.Ny/2)]);
    
    % z slice
    subplot3 = subplot(1, 3, 3, 'Parent', fig_h);
    hold(subplot3, 'on');
    imagesc(100 * setting.y_vec, 100 * setting.x_vec, ...
        squeeze(phan2plot(:, :, setting.Nz/2)), [0, max_label]);
    box(subplot3, 'on');
    axis(subplot3, 'xy');
    set(subplot3, 'DataAspectRatio', [1 1 1], 'Layer', 'top');
    xlabel('y [cm]');
    ylabel('x [cm]');
    xlim(subplot3, 100 * setting.y_vec([1,end]))
    ylim(subplot3, 100 * setting.x_vec([1,end]))
    title(['z slice ' int2str(setting.Nz/2)]);
    
    hold off
end
