function phan = getBreastPhantom(phantom_id, phantom_parameter, phantom_grid)
%GETBREASTPHANTOM Load and integrate breast phantom into PAMMOTH setting
%
% DESCRIPTION:
%       getBreastPhantom returns a breast segmentation aligned with the
%       PAMMOTH scanner by creating a generic breast phantom or loading a
%       segementation, fitting it into bowl, and interpolating it into the
%       spatial resolution
%
% USAGE:
%       phan = getBreastPhantom(phantom_id, phantom_path, setting)
%       phan = getBreastPhantom(phantom_id, phantom_path, setting, plot_phantom)
%
% INPUTS:
%       phantom_id   - string to identify one of the different MRI phantoms
%                      or a generic phantom: 'Neg_07_Left', 'Neg_35_Left',
%                      'Neg_47_Left' for the MRI phantoms and 'generic' for
%                      a generic, homogenous one.
%       phantom_parameter - for MRI phanotms, a file path to directory
%                           containting the OA-BREAST data set, for
%                           generic, the z-height of the breast
%       setting      - a struct generated by makePAMMOTHGeometry.m
%
% OPTIONAL INPUTS:
%       plot_phantom - boolean controlling whether the phantom is
%                      plotted (default = false)
%
% OUTPUTS:
%       phan - uint8 volume containing segementation
%               0: background
%               1: fibro-glandular tissue
%               2: fat
%               3: skin layer
%               4: blood vessel
%               5: generic breast tissue
%
% ABOUT:
%       author          - Mark Anastsio, Felix Lucka
%       date            - 19.02.2017
%       last update     - 06.04.2017
%
% See also makePAMMOTHGeometry makeIllumination



% define sizes of phantom
% MRI phantoms
switch phantom_id
    case 'Neg_07_Left'
        Nx = 616; Ny = 485; Nz = 719;
        dx = 0.2 * 10^-3; % [m]
    case 'Neg_35_Left'
        Nx = 284; Ny = 411; Nz = 722;
        dx = 0.2 * 10^-3; % [m]
    case 'Neg_47_Left'
        Nx = 495; Ny = 615; Nz = 752;
        dx = 0.2 * 10^-3; % [m]
    otherwise
        error(['Choose one of the supported phantoms: ''generic'', ' ...
            '''Neg_07_Left'', ''Neg_35_Left'' or ''Neg_47_Left''']);
end

% load phantom
fid  = fopen([phantom_parameter phantom_id '/MergedPhantom.DAT'], 'r');
phan = fread(fid, 'uint8');
phan = uint8(reshape(phan, [Nx, Ny, Nz]));
fclose(fid);

% in the provided phantoms, the tissues start with 2 (bug)
phan = phan - 1;
phan(phan < 0) = 0;

% flip x and z dimensions
phan = permute(phan, [3, 2, 1]);

% add 0 layer
% phan = padarray(phan, mod(size(phan)+1, 2), 'pre');
phan1 = zeros(intManipulation(size(phan), 'oddUp'));
phan1((mod(size(phan,1)+1, 2)+1):end, (mod(size(phan,2)+1, 2)+1):end, ...
    (mod(size(phan,3)+1, 2)+1):end) = phan;

phan = phan1; clear phan_

% set up interpolation into spatial grid
phan_size = size(phan);
[X1,Y1,Z1] = ndgrid(dx * (-((phan_size(1)-1)/2):1:((phan_size(1)-1)/2)),...
    dx * (-((phan_size(2)-1)/2):1:((phan_size(2)-1)/2)), dx * (-(phan_size(3)-1):0));

% get the three-dimensional Cartesian coordinates for the pahnatom grid
[X,Y,Z] = ndgrid(phantom_grid.x_vec, phantom_grid.y_vec, phantom_grid.z_vec);

% interpolate into spatial grid
phan =  interpn(X1, Y1, Z1, phan, X, Y, Z, 'nearest');

% make 'NaNs' zero
phan(isnan(phan)) = 0; 

end